
w(here)

    打印栈回溯，最新的帧位于底部。 有一个箭头 (>) 指明当前帧，该帧决定了大多数命令的上下文。

d(own) [count]

    在堆栈回溯中，将当前帧向下移动 count 级（默认为 1 级，移向更新的帧）。

u(p) [count]

    在堆栈回溯中，将当前帧向上移动 count 级（默认为 1 级，移向更老的帧）。

b(reak) [([filename:]lineno | function) [, condition]]


tbreak [([filename:]lineno | function) [, condition]]

    临时断点，在第一次命中时会自动删除。它的参数与 break 相同。

cl(ear) [filename:lineno | bpnumber ...]¶

    如果参数是 filename:lineno，则清除此行上的所有断点。如果参数是空格分隔的断点编号列表，则清除这些断点。如果不带参数，则清除所有断点（但会先提示确认）。

disable bpnumber [bpnumber ...]

    禁用断点，断点以空格分隔的断点编号列表给出。禁用断点表示它不会导致程序停止执行，但是与清除断点不同，禁用的断点将保留在断点列表中并且可以（重新）启用。

enable bpnumber [bpnumber ...]

    启用指定的断点。

ignore bpnumber [count]

    为指定的断点编号设置忽略次数。 如果省略 count，则忽略次数将设置为 0。 当忽略次数为零时断点将变为活动状态。 如果为非零值，则在每次到达断点且断点未禁用且关联条件取真值时 count 就像递减。

condition bpnumber [condition]

    为断点设置一个新 condition，它是一个表达式，且它的计算值为 true 时断点才起作用。如果没有给出 condition，则删除现有条件，也就是将断点设为无条件。

s(tep)¶

    运行当前行，在第一个可以停止的位置（在被调用的函数内部或在当前函数的下一行）停下。

n(ext)

    继续运行，直到运行到当前函数的下一行，或当前函数返回为止。（ next 和 step 之间的区别在于，step 进入被调用函数内部并停止，而 next （几乎）全速运行被调用函数，仅在当前函数的下一行停止。）

unt(il) [lineno]

    如果不带参数，则继续运行，直到行号比当前行大时停止。

    如果带有 lineno，则继续执行直至行号大于或等于 lineno。 在这两种情况下，在当前帧返回时也将停止。

    在 3.2 版本发生变更: 允许明确给定行号。

r(eturn)

    继续运行，直到当前函数返回。

c(ont(inue))

    继续运行，仅在遇到断点时停止。

j(ump) lineno

    设置即将运行的下一行。仅可用于堆栈最底部的帧。它可以往回跳来再次运行代码，也可以往前跳来跳过不想运行的代码。
