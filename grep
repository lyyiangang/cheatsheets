# To search a file for a pattern:
grep <pattern> <file>

# grep keyword and print the files' name only
grep -l 'abc' a.json

# print files which don't contain keyword
grep -L 'abc' a.json

# To perform a case-insensitive search (with line numbers):
grep -in <pattern> <file>

# To recursively grep for string <pattern> in <dir>:
grep -R <pattern> <dir>

# Read search patterns from a file (one per line):
grep -f <pattern-file> <file>

# Find lines NOT containing pattern:
grep -v <pattern> <file>
#e.g. print lines without abc or efg
grep -Ev 'abc|efg' a.txt

# Set how many lines to show before (-B) and after (-A) pattern:
grep -B 3 -A 2 <pattern> <file>

# To grep with regular expressions:
grep "^00" <file>                                               # Match lines starting with 00
grep -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" <file> # Find IP add

# To find all files that match <pattern> in <dir>
grep -rnw <dir> -e <pattern>

# To exclude grep from your grepped output of ps:
# (Add [] to the first letter. Ex: sshd -> [s]shd)
ps aux | grep '[h]ttpd'

# Colour in red {bash} and keep all other lines
ps aux | grep -E --color 'bash|$'

# 只显示满足正则匹配的字符串
grep -oP '\d+' <str>

# grep in files with specified extension
grep -R --include="*.cxx"  "ToSearchString"  .

# check whether string exist in file
if grep -q 'target_str' a.txt; then
	echo "find str in a.txt"
fi

# grep process please see 'pgrep' comand
#
# grep multi lines
#
#.txt file:
#  """
#  kind: Deployment
#  metadata:
#  name: projecta-web-ms-deployment
#  namespace: projecta-dev
#  """
# to match 'name' row, we can use. P: user perl. z:process multi line. o:only display lines which match
grep -Pzo "metadata:\s*\n  name:.*$" tmp.txt
